/*
============================================================================
COMMENTED OUT - OLD DUEL SYSTEM (FindOpponent.tsx)
============================================================================
This file was part of the old duel system and has been commented out for the
new casino-style duel implementation. The new system will be in NewFindOpponent.tsx
============================================================================
*/

import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/shared/ui/card";
import { Button } from "@/components/shared/ui/button";
import { Input } from "@/components/shared/ui/input";
import { Label } from "@/components/shared/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/shared/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/shared/ui/select";
import { Badge } from "@/components/shared/ui/badge";
import { ArrowLeft, Search, Users, Target, Settings, Trophy } from "lucide-react";
import { useI18n } from "@/hooks/use-i18n";
import { useProfile } from "@/hooks/use-profile";
import { useDuelMatchmaking } from "@/hooks/use-duel-matchmaking";
import { toast } from "sonner";

const topics = [
  { id: "financas", name: "Finan√ßas", emoji: "üí∞", color: "bg-green-500/10 text-green-700 border-green-300" },
  { id: "cripto", name: "Criptomoedas", emoji: "‚Çø", color: "bg-orange-500/10 text-orange-700 border-orange-300" },
  { id: "investimentos", name: "Investimentos", emoji: "üìà", color: "bg-blue-500/10 text-blue-700 border-blue-300" },
  { id: "economia", name: "Economia", emoji: "üè¶", color: "bg-purple-500/10 text-purple-700 border-purple-300" }
];

export default function FindOpponent() {
  const navigate = useNavigate();
  const { t } = useI18n();
  const { profile } = useProfile();
  const { isSearching, matchResult, startMatchmaking, cancelMatchmaking } = useDuelMatchmaking();
  
  const [selectedTopic, setSelectedTopic] = useState("financas");
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);

  // Handle successful match
  useEffect(() => {
    if (matchResult?.matchFound && matchResult?.opponentId) {
      toast.success(`Oponente encontrado!`);
      // Navigate to duel or waiting screen based on match type
      if (matchResult.opponentType === 'bot') {
        navigate(`/duel/${matchResult.opponentId}`);
      } else {
        navigate(`/duel-waiting/${matchResult.opponentId}`);
      }
    }
  }, [matchResult, navigate]);

  const handleQuickMatch = async () => {
    if (!selectedTopic) {
      toast.error("Selecione um t√≥pico primeiro");
      return;
    }

    try {
      await startMatchmaking(selectedTopic);
    } catch (error) {
      console.error("Erro ao iniciar matchmaking:", error);
      toast.error("Erro ao procurar oponente");
    }
  };

  const handleCancelSearch = async () => {
    try {
      await cancelMatchmaking();
      toast.info("Busca cancelada");
    } catch (error) {
      console.error("Erro ao cancelar busca:", error);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-border/50">
        <div className="flex items-center gap-3">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate(-1)}
            className="border-border/30"
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-xl font-bold text-foreground">
            Encontrar Oponente
          </h1>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6 space-y-6">
        {/* Topic Selection */}
        <Card className="border-border/30 bg-background/50">
          <CardHeader className="pb-4">
            <CardTitle className="flex items-center gap-2 text-lg">
              <Target className="h-5 w-5" />
              Sele√ß√£o de T√≥pico
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Label className="text-sm font-medium">Escolha o t√≥pico do duelo</Label>
            <Select value={selectedTopic} onValueChange={setSelectedTopic}>
              <SelectTrigger className="mt-2 h-11">
                <SelectValue placeholder="Selecione um t√≥pico" />
              </SelectTrigger>
              <SelectContent>
                {topics.map((topic) => (
                  <SelectItem key={topic.id} value={topic.id}>
                    <div className="flex items-center gap-2">
                      <span>{topic.emoji}</span>
                      <span>{topic.name}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </CardContent>
        </Card>

        {/* Matchmaking Tabs */}
        <Tabs defaultValue="quick" className="w-full">
          <TabsList className="grid w-full grid-cols-3 h-10">
            <TabsTrigger value="quick" className="text-sm">Partida R√°pida</TabsTrigger>
            <TabsTrigger value="search" className="text-sm">Buscar Jogadores</TabsTrigger>
            <TabsTrigger value="friends" className="text-sm">Amigos</TabsTrigger>
          </TabsList>

          {/* Quick Match */}
          <TabsContent value="quick">
            <Card className="border-border/30 bg-background/50">
              <CardContent className="p-6">
                <h3 className="text-lg font-semibold mb-4">In√≠cio R√°pido</h3>
                
                {!isSearching ? (
                  <div className="space-y-4">
                    <Button 
                      onClick={handleQuickMatch}
                      className="w-full h-12"
                      disabled={!selectedTopic}
                    >
                      <Users className="mr-2 h-5 w-5" />
                      Encontrar Jogador
                    </Button>
                    
                    <div className="text-center">
                      <Button variant="outline" size="sm">
                        <Settings className="h-4 w-4 mr-2" />
                        Prefer√™ncias
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center space-y-4">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
                    <p className="text-sm text-muted-foreground">Procurando oponente...</p>
                    <Button variant="outline" onClick={handleCancelSearch}>
                      Cancelar Busca
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Search Players */}
          <TabsContent value="search">
            <Card className="border-border/30 bg-background/50">
              <CardHeader>
                <div className="flex items-center gap-2">
                  <Search className="h-5 w-5" />
                  <h3 className="text-lg font-semibold">Buscar Jogadores</h3>
                </div>
              </CardHeader>
              <CardContent>
                <Input
                  placeholder="Pesquisar usu√°rios..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="mb-4"
                />
                
                {searchResults.length === 0 ? (
                  <div className="text-center py-8">
                    <Search className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">Nenhum resultado</h3>
                    <p className="text-sm text-muted-foreground">Procure por jogadores para desafiar</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {searchResults.map((user: any) => (
                      <div key={user.id} className="flex items-center justify-between p-3 border border-border/30 rounded-lg">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center">
                            <Users className="h-5 w-5" />
                          </div>
                          <div>
                            <p className="font-medium">{user.display_name}</p>
                            <p className="text-sm text-muted-foreground">N√≠vel {user.level}</p>
                          </div>
                        </div>
                        <Button size="sm">Desafiar</Button>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Friends */}
          <TabsContent value="friends">
            <Card className="border-border/30 bg-background/50">
              <CardHeader>
                <div className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  <h3 className="text-lg font-semibold">Seus Amigos</h3>
                </div>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Users className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">Nenhum amigo</h3>
                  <p className="text-sm text-muted-foreground">Adicione amigos para desafi√°-los</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Stats Card */}
        <Card className="border-border/30 bg-background/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-lg">
              <Trophy className="h-5 w-5" />
              Suas Estat√≠sticas
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-3 gap-4 text-center">
              <div>
                <p className="text-2xl font-bold text-primary">0</p>
                <p className="text-sm text-muted-foreground">Vit√≥rias</p>
              </div>
              <div>
                <p className="text-2xl font-bold text-destructive">0</p>
                <p className="text-sm text-muted-foreground">Derrotas</p>
              </div>
              <div>
                <p className="text-2xl font-bold text-amber-500">{profile?.level || 1}</p>
                <p className="text-sm text-muted-foreground">N√≠vel</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}