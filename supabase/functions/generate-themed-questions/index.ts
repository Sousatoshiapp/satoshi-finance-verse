import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Mapeamento dos temas com suas especifica√ß√µes
const THEME_TEMPLATES = {
  trading: {
    name: "Trading & An√°lise T√©cnica",
    description: "Perguntas sobre an√°lise t√©cnica, gr√°ficos, indicadores, estrat√©gias de trading, suporte/resist√™ncia, padr√µes candlestick.",
    keywords: "an√°lise t√©cnica, gr√°ficos, indicadores, trading, suporte, resist√™ncia, candlestick, RSI, MACD, m√©dias m√≥veis"
  },
  cryptocurrency: {
    name: "Criptomoedas & DeFi",
    description: "Perguntas sobre Bitcoin, Ethereum, blockchain, DeFi, NFTs, protocolos, yield farming, staking.",
    keywords: "Bitcoin, Ethereum, blockchain, DeFi, NFT, staking, yield farming, smart contracts, Web3"
  },
  portfolio: {
    name: "Gest√£o de Portfolio",
    description: "Perguntas sobre diversifica√ß√£o, asset allocation, risk management, rebalanceamento, tipos de ativos.",
    keywords: "diversifica√ß√£o, asset allocation, risco, portfolio, rebalanceamento, correla√ß√£o, sharpe ratio"
  },
  basic_investments: {
    name: "Investimentos B√°sicos",
    description: "Perguntas sobre fundamentos de investimentos, renda fixa, renda vari√°vel, tesouro direto, CDB, a√ß√µes.",
    keywords: "investimentos, renda fixa, renda vari√°vel, tesouro direto, CDB, a√ß√µes, fundos, dividendos"
  },
  financial_education: {
    name: "Educa√ß√£o Financeira",
    description: "Perguntas sobre conceitos financeiros b√°sicos, juros compostos, infla√ß√£o, planejamento financeiro.",
    keywords: "educa√ß√£o financeira, juros compostos, infla√ß√£o, planejamento, reserva emerg√™ncia, aposentadoria"
  },
  budgeting: {
    name: "Or√ßamento & Planejamento",
    description: "Perguntas sobre controle de gastos, or√ßamento pessoal, metas financeiras, poupan√ßa.",
    keywords: "or√ßamento, planejamento, controle gastos, poupan√ßa, metas financeiras, fluxo de caixa"
  },
  economics: {
    name: "Economia & Macroeconomia",
    description: "Perguntas sobre indicadores econ√¥micos, pol√≠tica monet√°ria, infla√ß√£o, PIB, taxa de juros.",
    keywords: "economia, macroeconomia, PIB, infla√ß√£o, pol√≠tica monet√°ria, taxa de juros, COPOM, indicadores"
  }
};

// Fun√ß√£o para embaralhar array (Fisher-Yates)
function shuffleArray(array: any[]) {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// Fun√ß√£o para garantir posi√ß√£o aleat√≥ria da resposta correta
function randomizeAnswerPosition(question: any) {
  const correctAnswer = question.correct_answer;
  const allOptions = [correctAnswer, ...question.wrong_answers];
  const shuffledOptions = shuffleArray(allOptions);
  
  return {
    ...question,
    options: shuffledOptions,
    correct_answer: correctAnswer // Mant√©m a resposta correta original
  };
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üéØ Iniciando gera√ß√£o de perguntas tem√°ticas');
    
    const { theme, difficulty = 'mixed', count = 50 } = await req.json();
    
    if (!theme || !THEME_TEMPLATES[theme]) {
      return new Response(JSON.stringify({ 
        error: 'Tema inv√°lido ou n√£o especificado',
        availableThemes: Object.keys(THEME_TEMPLATES)
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!openAIApiKey) {
      return new Response(JSON.stringify({ error: 'OpenAI API key n√£o configurada' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const themeConfig = THEME_TEMPLATES[theme];
    console.log(`üìö Gerando ${count} perguntas para tema: ${themeConfig.name}`);

    // Dividir as perguntas por dificuldade para garantir distribui√ß√£o
    const questionsPerDifficulty = Math.ceil(count / 3);
    const difficulties = ['easy', 'medium', 'hard'];
    
    let allGeneratedQuestions: any[] = [];

    for (const diff of difficulties) {
      console.log(`üîÑ Gerando ${questionsPerDifficulty} perguntas de dificuldade: ${diff}`);
      
      const difficultyInstructions = {
        easy: "n√≠vel b√°sico/iniciante, conceitos fundamentais",
        medium: "n√≠vel intermedi√°rio, aplica√ß√£o pr√°tica de conceitos",
        hard: "n√≠vel avan√ßado, cen√°rios complexos e an√°lise profunda"
      };

      const prompt = `Voc√™ √© um especialista em educa√ß√£o financeira. Gere EXATAMENTE ${questionsPerDifficulty} perguntas de m√∫ltipla escolha sobre "${themeConfig.name}" com dificuldade ${difficultyInstructions[diff]}.

TEMA: ${themeConfig.description}
PALAVRAS-CHAVE: ${themeConfig.keywords}

INSTRU√á√ïES CR√çTICAS:
1. Cada pergunta deve ter EXATAMENTE 4 op√ß√µes de resposta
2. Apenas UMA op√ß√£o deve estar correta
3. Explica√ß√£o deve ter no m√°ximo 60 caracteres: "[Conceito] √© [defini√ß√£o]"
4. Dificuldade: ${diff}
5. Use terminologia brasileira e contexto do mercado brasileiro
6. Perguntas pr√°ticas e relevantes para investidores brasileiros

FORMATO JSON OBRIGAT√ìRIO:
{
  "questions": [
    {
      "question": "Texto da pergunta objetiva e clara?",
      "option_a": "Primeira op√ß√£o",
      "option_b": "Segunda op√ß√£o", 
      "option_c": "Terceira op√ß√£o",
      "option_d": "Quarta op√ß√£o",
      "correct_answer": "Primeira op√ß√£o",
      "explanation": "Conceito √© defini√ß√£o simples",
      "difficulty": "${diff}",
      "category": "${themeConfig.name}"
    }
  ]
}

GERE EXATAMENTE ${questionsPerDifficulty} PERGUNTAS NO FORMATO ACIMA.`;

      console.log(`ü§ñ Enviando prompt para OpenAI (${diff})`);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4.1-2025-04-14',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um especialista em educa√ß√£o financeira brasileira. Gere perguntas de m√∫ltipla escolha precisas e educativas em formato JSON v√°lido.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 4000
        }),
      });

      if (!response.ok) {
        console.error(`‚ùå Erro OpenAI (${diff}):`, response.status, response.statusText);
        continue;
      }

      const data = await response.json();
      const content = data.choices[0].message.content;

      try {
        console.log(`üìù Processando resposta OpenAI (${diff})`);
        
        // Tentar extrair JSON da resposta
        let jsonMatch = content.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
          console.error(`‚ùå N√£o foi poss√≠vel extrair JSON da resposta (${diff})`);
          continue;
        }

        const questionsData = JSON.parse(jsonMatch[0]);
        
        if (!questionsData.questions || !Array.isArray(questionsData.questions)) {
          console.error(`‚ùå Formato JSON inv√°lido (${diff}):`, questionsData);
          continue;
        }

        console.log(`‚úÖ ${questionsData.questions.length} perguntas processadas (${diff})`);

        // Processar cada pergunta
        for (const q of questionsData.questions) {
          try {
            // Criar array de op√ß√µes e embaralhar
            const options = [q.option_a, q.option_b, q.option_c, q.option_d];
            const shuffledOptions = shuffleArray(options);
            
            // Garantir que a resposta correta est√° nas op√ß√µes
            if (!options.includes(q.correct_answer)) {
              console.warn(`‚ö†Ô∏è Resposta correta n√£o encontrada nas op√ß√µes: ${q.correct_answer}`);
              continue;
            }

            const processedQuestion = {
              question: q.question,
              options: shuffledOptions,
              correct_answer: q.correct_answer,
              explanation: q.explanation,
              difficulty: diff,
              category: q.category || themeConfig.name,
              theme: theme
            };

            allGeneratedQuestions.push(processedQuestion);
          } catch (questionError) {
            console.error(`‚ùå Erro processando pergunta individual:`, questionError);
          }
        }

      } catch (parseError) {
        console.error(`‚ùå Erro fazendo parse da resposta (${diff}):`, parseError);
        console.log(`Conte√∫do recebido: ${content.substring(0, 500)}...`);
      }
    }

    console.log(`üìä Total de perguntas geradas: ${allGeneratedQuestions.length}`);

    if (allGeneratedQuestions.length === 0) {
      return new Response(JSON.stringify({ 
        error: 'Nenhuma pergunta foi gerada com sucesso',
        details: 'Verifique os logs para mais detalhes'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Inserir perguntas no Supabase
    console.log(`üíæ Inserindo ${allGeneratedQuestions.length} perguntas no banco de dados`);
    
    const { data: insertedQuestions, error: insertError } = await supabase
      .from('quiz_questions')
      .insert(allGeneratedQuestions)
      .select();

    if (insertError) {
      console.error('‚ùå Erro inserindo no banco:', insertError);
      return new Response(JSON.stringify({ 
        error: 'Erro inserindo perguntas no banco de dados',
        details: insertError.message,
        generatedCount: allGeneratedQuestions.length
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`‚úÖ ${insertedQuestions?.length || 0} perguntas inseridas com sucesso`);

    return new Response(JSON.stringify({
      success: true,
      message: `${insertedQuestions?.length || 0} perguntas geradas e inseridas para o tema ${themeConfig.name}`,
      theme: themeConfig.name,
      questionsGenerated: insertedQuestions?.length || 0,
      breakdown: {
        easy: insertedQuestions?.filter(q => q.difficulty === 'easy').length || 0,
        medium: insertedQuestions?.filter(q => q.difficulty === 'medium').length || 0,
        hard: insertedQuestions?.filter(q => q.difficulty === 'hard').length || 0
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå Erro geral na fun√ß√£o:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor',
      message: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});